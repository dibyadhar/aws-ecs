name: 'Deploy Container to ECS Task'

on:
  push:
  workflow_dispatch:
  
  pull_request:
    branches: [main]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # Configure global environment values

env: 
  AWS_REGION: eu-west-2                                                                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ecs-hello-world           # set this to your Amazon ECR repository name
  ECS_SERVICE: hello-world-cluster                                                       # set this to your Amazon ECS service name
  ECS_CLUSTER: hello-world-cluster                                                               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: hello-world:2                                                     # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: hello-world

jobs:
  build:
    name: Build and Deploy to ECS
    runs-on: ubuntu-latest      
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Setup AWS Via OIDC Connection   
    # - name: Connect to AWS 
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with: 
    #     role-to-assume: arn:aws:iam::111788162356:role/infrastructure-deployer-nonprod
    #     role-session-name: terraform-validate
    #     aws-region: ${{env.AWS_REGION}}
    #     mask-aws-account-id: false

    # Setup AWS Via Access Keys
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: false

    # Verify AWS Account
    - name: Verify Caller Identity
      run: aws sts get-caller-identity

    # Login to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    # Build Image
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition hello-world:2 \
        --query taskDefinition > task-definition.json

    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}


    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
